/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package redebayesiana;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import org.netbeans.lib.awtextra.AbsoluteLayout;

/**
 *
 * @author david
 */
public class DrawTreeBayes extends javax.swing.JPanel implements ActionListener{
    private boolean moved = false;
    int indexNode;
    ArrayList drawline = new ArrayList();
    Component comp1 = null;
    Component comp2 = null;
    boolean draw = false;

    public boolean isDraw() {
        return draw;
    }

    public void setDraw(boolean draw) {
        this.draw = draw;
    }
     public void addComponentToDrawLine(DrawLineComponents dw){
        drawline.add(dw);
    }
    public void removeComponentFromTree(DrawLineComponents dw){
        drawline.remove(dw);
    }
    /**
     * Creates new form DrawTreeBayes
     */
    
    public DrawTreeBayes() {
        initComponents();
    }
    
    
    @Override
    public void paint(Graphics g) {
        super.paint(g); //To change body of generated methods, choose Tools | Templates.
        Graphics2D g2d = (Graphics2D) g;
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

        g2d.setPaint(Color.BLACK);
        for (Object drawline1 : drawline) {
            DrawLineComponents dr = (DrawLineComponents) drawline1;
            Point p1 = dr.getComp1().getLocation();
            Point p2 = dr.getComp2().getLocation();
            if(p1.x <= p2.x){
                if(p1.y <= p2.y){
                    g2d.drawLine(p1.x+151, p1.y+97, p2.x+75, p2.y);
                }else{
                    g2d.drawLine(p1.x+75, p1.y, p2.x, p2.y+97);
                }
            }else{
                if(p1.y <= p2.y){
                    g2d.drawLine(p1.x, p1.y+97, p2.x+75, p2.y);
                }else{
                    g2d.drawLine(p1.x+75, p1.y, p2.x+151, p2.y+97);
                }
            }
            
        }
        boolean ajusta = false;
        int ajuste = 0;
        for(int i = 0; i < getComponentCount();i++){
            if(getComponent(i).getX() < 0 && ajusta == false){
                ajusta = true;
                ajuste = getComponent(i).getX()*(-1);
                i = 0;
            }
            if(getComponent(i).getX() +  getComponent(i).getWidth() > getWidth()){
                setPreferredSize(new Dimension(getComponent(i).getX() +  getComponent(i).getWidth(), getHeight()));
            }
            if(getComponent(i).getY() +  getComponent(i).getHeight() > getHeight()){
                setPreferredSize(new Dimension(getWidth(), getComponent(i).getY() +  getComponent(i).getHeight()));
            }
            if(ajusta){
                setPreferredSize(new Dimension(getWidth() + ajuste, getHeight()));
                setLayout(new AbsoluteLayout());
                getComponent(i).setLocation(getComponent(i).getX() + ajuste, getComponent(i).getY());
            }
        }
        revalidate();
        repaint();
        g.dispose();
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                formMouseMoved(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseMoved
        if (moved && indexNode > -1) {
            getComponent(indexNode).setLocation(getMousePosition().x - 75, getMousePosition().y - 97);
        }
        repaint();
    }//GEN-LAST:event_formMouseMoved

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        if (evt.getButton() == 1) {
            if (evt.getClickCount() == 1) {
                if (moved) {
                    getComponent(indexNode).setLocation(getMousePosition().x - 75, getMousePosition().y - 97);
                    moved = false;
                    indexNode = -1;
                }
                if (draw) {
                    if (comp1 == null) {
                        Point noPoint = getMousePosition();
                        if (getComponentAt(noPoint) != null) {
                            if (getComponentAt(noPoint).getWidth() == 150) {
                                comp1 = getComponentAt(noPoint);
                            }
                        }
                    } else {
                        Point noPoint2 = getMousePosition();
                        if (getComponentAt(noPoint2) != null) {
                            if (getComponentAt(noPoint2).getWidth() == 150) {
                                comp2 = getComponentAt(noPoint2);
                                drawline.add(new DrawLineComponents(comp1, comp2));
                                draw = false;
                                comp1 = null;
                                comp2 = null;
                            }
                        }
                    }
                }

            }
            if (evt.getClickCount() == 2) {
                setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

                Point noPoint = getMousePosition();
                if (getComponentAt(noPoint) != null) {
                    if (getComponentAt(noPoint).getWidth() == 150) {
                        moved = true;
                        indexNode = getComponentZOrder(getComponentAt(noPoint));
                    }

                } else {
                    moved = false;
                    noPoint = null;
                    indexNode = -1;
                }

            }
        } else if (evt.getButton() == 3) {
            Point noPoint = getMousePosition();

            if (getComponentAt(noPoint) != null) {
                if (getComponentAt(noPoint).getWidth() == 150) {
                    //AlterarNo.show(this, evt.getX(), evt.getY());
                    indexNode = getComponentZOrder(getComponentAt(noPoint));
                }

            }
        }
    }//GEN-LAST:event_formMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
        
        
        repaint();
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
